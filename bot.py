import os
import re
import json
import asyncio
import httpx
from collections import Counter
from itertools import combinations
from datetime import date, datetime, timedelta
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import Update
from telegram.error import RetryAfter, TimedOut
import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",)

try:
    from zoneinfo import ZoneInfo
    BKK = ZoneInfo("Asia/Bangkok")
except ImportError:
    from datetime import timezone
    BKK = timezone(timedelta(hours=7))

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ .env
from dotenv import load_dotenv
load_dotenv()

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ token ‡∏à‡∏≤‡∏Å .env
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ Chat ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Broadcast (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ comma)
CHAT_IDS = [c.strip() for c in os.getenv("TELEGRAM_CHAT_IDS", "").split(",") if c.strip()]

if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN not found in .env file")

# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏Ñ (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ /setlocks)
lock_size = 4

def main():
    logging.info("Booting Telegram bot‚Ä¶")
    app = Application.builder().token(TOKEN).build()
    # ‚Ä¶ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ‚Ä¶
    logging.info("ü§ñ Bot is running‚Ä¶")
    app.run_polling()
    
# ======================================================================
# Utils: State per-day (‡∏Å‡∏±‡∏ô‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó) + Path helpers
# ======================================================================
def state_file_for(d: date) -> str:
    # ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏±‡∏ß‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏•‡∏¢ (‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå)
    return os.path.join(os.path.dirname(__file__), f".world264_state_{d.isoformat()}.json")

def load_state(d: date) -> dict:
    path = state_file_for(d)
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return {"last_processed_round_count": 0}

def save_state(d: date, state: dict):
    path = state_file_for(d)
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False)
    except Exception as e:
        print(f"[STATE_SAVE_ERROR] {e}")


# ======================================================================
# Telegram Handlers
# ======================================================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ <b>‡∏ö‡∏≠‡∏ó‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!</b>\n\n"
        "<b>‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</b>\n"
        "1Ô∏è‚É£ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö <code>123 - 45</code>\n"
        "2Ô∏è‚É£ ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å: ‡πÉ‡∏ä‡πâ <code>/analyze <‡∏ú‡∏•‡πÄ‡∏•‡∏Ç></code>\n"
        "3Ô∏è‚É£ ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤: ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå <code>/analyze</code>\n\n"
        "<b>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ:</b>\n"
        f"/setlocks N ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏Ñ (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {lock_size})\n/status ‚Üí ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
        parse_mode="HTML"
    )


async def setlocks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global lock_size
    try:
        size = int(context.args[0])
        if size <= 0:
            raise ValueError
        lock_size = size
        await update.message.reply_text(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡πÉ‡∏´‡∏°‡πà = {lock_size} ‡∏£‡∏≠‡∏ö")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ: /setlocks 4")


# ==============================================================================
# Data Fetching
# ==============================================================================
BASE_URL = "https://ltx-s3-prod.s3.ap-southeast-1.amazonaws.com/lotto-result-list/{d}.json"

async def fetch_daily_data_async(d: date) -> dict | None:
    """‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    url = BASE_URL.format(d=d.strftime("%Y-%m-%d"))
    try:
        async with httpx.AsyncClient(timeout=15, follow_redirects=True) as c:
            r = await c.get(url)
            if r.status_code == 200:
                return r.json()
    except Exception as e:
        print(f"[FETCH_ERROR] Failed to fetch {url}: {e}")
    return None

def pick_world264_key(day_data: dict) -> str | None:
    """
    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå world264 ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô:
    - ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å: lotto_type == "01", lotto_subtype == "22", ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö >= 200
    - ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ "0122" ‡∏Å‡πá‡πÉ‡∏ä‡πâ
    """
    best_key = None
    best_len = -1
    for gk, rounds in (day_data or {}).items():
        if not isinstance(rounds, dict) or not rounds:
            continue
        sample = next(iter(rounds.values()), {})
        if sample.get("lotto_type") == "01" and sample.get("lotto_subtype") == "22":
            l = len(rounds)
            if l > best_len:
                best_key, best_len = gk, l
    if best_key:
        return best_key
    return "0122" if day_data and "0122" in day_data else None

def extract_all_results_sorted(day_data: dict, world_key: str) -> list[dict]:
    """
    ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á world_key ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° round_number (int)
    ‡∏Ñ‡∏∑‡∏ô: [{round, top3, bottom2}, ...]
    """
    world_data = day_data.get(world_key)
    if not isinstance(world_data, dict):
        return []

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏° sort ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    def _round_num(v):
        try:
            return int(v.get("round_number", 0))
        except Exception:
            return 0

    all_records = sorted(
        [v for v in world_data.values() if isinstance(v, dict)],
        key=_round_num
    )

    results_list = []
    for rec in all_records:
        res = rec.get("result") or {}
        top3 = res.get("top_three")
        bottom2 = res.get("bottom_two")
        if isinstance(top3, str) and len(top3) == 3 and top3.isdigit() and \
           isinstance(bottom2, str) and len(bottom2) == 2 and bottom2.isdigit():
            try:
                round_num = int(rec.get("round_number", 0))
            except Exception:
                round_num = 0
            results_list.append({"round": round_num, "top3": top3, "bottom2": bottom2})
    return results_list

# ======================================================================
# Analysis
# ======================================================================
def analyze_formula_2(results: list[dict], lock_size: int = 4) -> str | None:
    """
    ‡∏™‡∏π‡∏ï‡∏£ 2: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• lock_size ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö ‚Äú‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏ï‡πá‡∏°‚Äù ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ß‡∏¥‡πà‡∏á 3 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å (‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢ r3 + r4), (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏ô r4 + ‡∏™‡∏¥‡∏ö‡∏•‡πà‡∏≤‡∏á r4), (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏•‡πà‡∏≤‡∏á r3 + r4)
    """
    if not results:
        return None
    usable = (len(results) // lock_size) * lock_size
    if usable == 0:
        return None

    last_lock = results[usable - lock_size: usable]
    # ‡∏≠‡∏¥‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏•‡πá‡∏≠‡∏Ñ
    try:
        r3 = last_lock[-2]
        r4 = last_lock[-1]

        t3_r3, b2_r3 = r3['top3'], r3['bottom2']
        t3_r4, b2_r4 = r4['top3'], r4['bottom2']

        digit1 = (int(t3_r3[0]) + int(t3_r4[0])) % 10
        digit2 = (int(t3_r4[2]) + int(b2_r4[0])) % 10
        digit3 = (int(b2_r3[1]) + int(b2_r4[1])) % 10

        run_digits = f"{digit1}-{digit2}-{digit3}"

        report = []
        report.append("üìä <b>‡∏™‡∏π‡∏ï‡∏£ 2 (‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ß‡∏¥‡πà‡∏á)</b>")
        report.append("‚îÄ" * 20)
        report.append(f"‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏•‡πá‡∏≠‡∏Ñ {lock_size} ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")

        block_lines = []
        for r in last_lock:
            prefix = f"{r.get('round', ''):>3}: " if r.get('round') else ""
            block_lines.append(f"<code>{prefix}{r['top3']} - {r['bottom2']}</code>")
        report.append("\n".join(block_lines))

        report.append(f"\n‚Üí <b>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</b> <code>{run_digits}</code> (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡πà‡∏á‡∏ö‡∏ô 19 ‡∏õ‡∏£‡∏∞‡∏ï‡∏π)")
        return "\n".join(report)

    except (KeyError, IndexError, TypeError, ValueError) as e:
        print(f"[ERROR] Formula 2 failed: {e}")
        return None

def analyze_3_digit_combos(original_numbers_3d: list[str], lock_size=4):
    """‡∏™‡∏π‡∏ï‡∏£ 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡∏∏‡∏î‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß (‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö+‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô)"""
    if not original_numbers_3d:
        return None

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏ö‡∏¥‡πâ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏≠‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô x11, x22)
    numbers_3d = [num for num in original_numbers_3d if len(num) == 3 and num.isdigit() and num[1] != num[2]]
    if not numbers_3d:
        return f"‡∏û‡∏ö {len(original_numbers_3d)} ‡∏ä‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡πÄ‡∏ö‡∏¥‡πâ‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏™‡∏π‡∏ï‡∏£ 1)"

    # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢
    two_digit_pairs = [list(num[1:]) for num in numbers_3d]
    locks = [two_digit_pairs[i:i + lock_size] for i in range(0, len(two_digit_pairs), lock_size)]
    total_locks = len(locks)
    if total_locks == 0:
        return None

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î candidate 3 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å 0-9 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (120 ‡∏ä‡∏∏‡∏î)
    all_digits = "0123456789"
    candidate_combos = [frozenset(c) for c in combinations(all_digits, 3)]

    results = []
    for combo in candidate_combos:
        any_hits = both_hits = all3_hits = 0
        for lock in locks:
            lock_digits = {d for pair in lock for d in pair}
            if not combo.isdisjoint(lock_digits):
                any_hits += 1
            if combo.issubset(lock_digits):
                all3_hits += 1
            if any(set(pair).issubset(combo) for pair in lock):
                both_hits += 1
        results.append({
            "combo_set": combo,
            "combo_list": sorted(list(combo)),
            "any": any_hits, "both": both_hits, "all3": all3_hits
        })

    full_coverage = [r for r in results if r["any"] == total_locks]
    if not full_coverage:
        return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∏‡∏î‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏•‡πá‡∏≠‡∏Ñ ({total_locks}/{total_locks})"

    sorted_combos = sorted(full_coverage, key=lambda x: (x["both"], x["all3"]), reverse=True)
    top_10 = sorted_combos[:10]  # (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠)

    total_rounds = len(numbers_3d)
    last_lock_size = len(locks[-1]) if locks else 0
    last_lock_info = ""
    if total_locks > 0 and last_lock_size != lock_size:
        last_lock_info = f" (‡∏•‡πá‡∏≠‡∏Ñ {total_locks} ‡∏°‡∏µ {last_lock_size} ‡∏£‡∏≠‡∏ö)"

    report = []
    report.append(f"üìä <b>‡∏™‡∏π‡∏ï‡∏£ 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡∏∏‡∏î‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß</b>")
    report.append(f"‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö 1‚Äì{total_rounds} (‡∏•‡πá‡∏≠‡∏Ñ 1‚Äì{total_locks}{last_lock_info})")
    report.append("‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà <b>‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö+‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢</b> ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô\n")
    report.append("‡∏ß‡∏±‡∏î 3 ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ï‡πà‡∏≠ ‚Äú‡∏•‡πá‡∏≠‡∏Ñ‚Äù:\n"
                  "<b>ANY</b> = ‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ä‡∏∏‡∏î‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß\n"
                  "<b>BOTH</b> = ‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô\n"
                  "<b>ALL3</b> = ‡∏ó‡∏±‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Ñ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 3 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏ô‡∏±‡πâ‡∏ô\n")

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ä‡∏∏‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    best_all3 = max(sorted_combos, key=lambda x: x['all3'])
    best_both = max(sorted_combos, key=lambda x: x['both'])

    report.append("\n<b>‡∏ä‡∏∏‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏î 19 ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ö‡∏ô):</b>")
    report.append(f"<b>‡∏ä‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏Å 1: {'-'.join(best_all3['combo_list'])}</b> ‚Äî ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏•‡πá‡∏≠‡∏Ñ ‡πÅ‡∏•‡∏∞ ALL3 ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ({best_all3['all3']}/{total_locks})")
    report.append(f"<b>‡∏ä‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏Å 2: {'-'.join(best_both['combo_list'])}</b> ‚Äî ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏•‡πá‡∏≠‡∏Ñ ‡πÅ‡∏•‡∏∞ BOTH ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ({best_both['both']}/{total_locks})")

    supplement = next((c for c in sorted_combos if c['combo_set'] not in [best_all3['combo_set'], best_both['combo_set']]), None)
    if supplement:
        report.append(f"<b>‡∏ä‡∏∏‡∏î‡πÄ‡∏™‡∏£‡∏¥‡∏°: {'-'.join(supplement['combo_list'])}</b> ‚Äî BOTH {supplement['both']}/{total_locks} ‡∏î‡∏µ‡∏°‡∏≤‡∏Å")

    # ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    other_options = []
    recommended_sets = {best_all3['combo_set'], best_both['combo_set']}
    if supplement:
        recommended_sets.add(supplement['combo_set'])
    for r in sorted_combos:
        if r['combo_set'] not in recommended_sets:
            other_options.append("".join(r['combo_list']))
        if len(other_options) >= 3:
            break
    if other_options:
        report.append(f"\n<b>‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏î‡∏µ:</b> {', '.join(other_options)}")

    return "\n".join(report)

def analyze_numbers(text: str, lock_size: int = 4) -> str | None:
    """
    Parse ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:
    - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç pattern "XXX - YY" ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏î‡πÅ‡∏ó‡∏£‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á "131:" ‡∏Ø‡∏•‡∏Ø)
    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö pattern ‡πÄ‡∏•‡∏¢ ‡∏Ñ‡πà‡∏≠‡∏¢ fallback ‡πÑ‡∏õ‡∏´‡∏≤ \b\d{3}\b
    """
    # source of truth ‡∏Å‡πà‡∏≠‡∏ô: "xxx - yy"
    pairs = re.findall(r"\b(\d{3})\s*-\s*(\d{2})\b", text)
    full_results_list = [{'top3': t3, 'bottom2': b2} for t3, b2 in pairs]

    if pairs:
        original_numbers_3d = [t3 for t3, _ in pairs]
    else:
        # fallback: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 3 ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ï‡πá‡∏° ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏∑‡πà‡∏ô
        original_numbers_3d = re.findall(r"\b(\d{3})\b", text)
        if not original_numbers_3d:
            return None

    parts = []

    # --- ‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏≤‡∏ä‡∏∏‡∏î‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ---
    res1 = analyze_3_digit_combos(original_numbers_3d, lock_size)
    if res1:
        parts.append(res1)

    # --- ‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà 2: ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ß‡∏¥‡πà‡∏á ---
    res2 = analyze_formula_2(full_results_list, lock_size)
    if res2:
        parts.append(res2)

    if not parts:
        return None

    separator = "\n\n" + "‚ïê" * 25 + "\n\n"
    return separator.join(parts)


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô /analyze (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö manual)
async def analyze_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_to_analyze = None
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if update.message and update.message.reply_to_message and update.message.reply_to_message.text:
        text_to_analyze = update.message.reply_to_message.text
    # 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ argument ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    elif context.args:
        text_to_analyze = " ".join(context.args)

    if not text_to_analyze:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:</b>\n"
            "1. ‡∏û‡∏¥‡∏°‡∏û‡πå <code>/analyze <‡∏ú‡∏•‡πÄ‡∏•‡∏Ç></code>\n"
            "2. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ <code>/analyze</code>\n\n"
            "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ô `TELEGRAM_CHAT_IDS` (‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ)",
            parse_mode="HTML"
        )
        return

    result = analyze_numbers(text_to_analyze, lock_size)

    if result is None:
        await update.message.reply_text("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö <code>123 - 45</code>", parse_mode="HTML")
        return

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ CHAT_IDS ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°
    if not CHAT_IDS:
        await update.message.reply_text(result, parse_mode="HTML")
        await update.message.reply_text("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ `TELEGRAM_CHAT_IDS` ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", parse_mode="HTML")
        return

    # Broadcast ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡∏Ñ‡∏±‡πà‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏¥‡∏î‡∏Å‡∏±‡∏ô rate-limit)
    sent = 0
    for cid in CHAT_IDS:
        try:
            await context.bot.send_message(chat_id=cid, text=result, parse_mode="HTML")
            sent += 1
            await asyncio.sleep(0.25)
        except RetryAfter as e:
            await asyncio.sleep(int(getattr(e, "retry_after", 2)) + 1)
        except TimedOut:
            await asyncio.sleep(1)
        except Exception as e:
            print(f"‚ùå Broadcast error to {cid}: {e}")

    await update.message.reply_text(f"‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á {sent}/{len(CHAT_IDS)} ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô /id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Chat ID
async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.message.chat
    await update.message.reply_text(
        f"<b>‚ÑπÔ∏è Chat Info</b>\n"
        f" ‚Ä¢ Title: <code>{chat.title or 'N/A'}</code>\n"
        f" ‚Ä¢ ID: <code>{chat.id}</code>\n"
        f" ‚Ä¢ Type: <code>{chat.type}</code>",
        parse_mode="HTML"
    )

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(BKK).date()
    state = load_state(today)
    last_cnt = int(state.get("last_processed_round_count", 0))
    await update.message.reply_text(
        f"üìÖ <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b> ({today.isoformat()})\n"
        f"‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏Ñ: <b>{lock_size}</b>\n"
        f"‚Ä¢ ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: <b>{last_cnt}</b>\n"
        f"‚Ä¢ ‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: <b>{last_cnt // lock_size}</b> ‡∏•‡πá‡∏≠‡∏Ñ",
        parse_mode="HTML"
    )

# Debug logger (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏±‡πâ‡∏á update object)
async def update_logger(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        update_json = update.to_json()
        print(f"\n[DEBUG] Received update:\n{update_json[:2000]}...\n")  # ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á
    except Exception as e:
        print(f"[DEBUG] Could not log update: {e}")

# ======================================================================
# Auto Poller (‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥)
# ======================================================================
async def poll_and_analyze(context: ContextTypes.DEFAULT_TYPE):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• world264 ‡∏Ç‡∏≠‡∏á ‚Äú‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‚Äù, ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‚Äú‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‚Äù
    ‡πÅ‡∏•‡∏∞ ‚Äú‡∏Ñ‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‚Äù (current_round_count % lock_size == 0)
    """
    today = datetime.now(BKK).date()
    state = load_state(today)
    last_processed_round_count = int(state.get("last_processed_round_count", 0))

    print("[POLL] Checking for new results...")

    daily_data = await fetch_daily_data_async(today)
    if not daily_data:
        print("[POLL] Failed to fetch daily data.")
        return

    world_key = pick_world264_key(daily_data)
    if not world_key:
        print("[POLL] Could not determine world_key for today.")
        return

    all_results = extract_all_results_sorted(daily_data, world_key)
    current_round_count = len(all_results)
    print(f"[POLL] Rounds: {current_round_count} (was {last_processed_round_count}), lock_size={lock_size}")

    # ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏û‡∏≠‡∏î‡∏µ
    if current_round_count > last_processed_round_count and current_round_count % lock_size == 0:
        print(f"[POLL] New full lock detected. Analyzing rounds {last_processed_round_count+1}..{current_round_count}...")
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° input ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏ï‡∏£‡∏≠‡πà‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà top3 - bottom2)
        text_to_analyze = "\n".join([f"{r['top3']} - {r['bottom2']}" for r in all_results])

        result = analyze_numbers(text_to_analyze, lock_size)
        if result and CHAT_IDS:
            print(f"[POLL] Broadcasting analysis to {len(CHAT_IDS)} chats...")
            for cid in CHAT_IDS:
                try:
                    await context.bot.send_message(chat_id=cid, text=result, parse_mode="HTML")
                    print(f"  ‚úÖ sent to {cid}")
                    await asyncio.sleep(0.25)
                except RetryAfter as e:
                    wait_s = int(getattr(e, "retry_after", 2)) + 1
                    print(f"  ‚è≥ rate-limited, wait {wait_s}s")
                    await asyncio.sleep(wait_s)
                except TimedOut:
                    print("  ‚è≥ timed out, retry brief sleep")
                    await asyncio.sleep(1)
                except Exception as e:
                    print(f"  ‚ùå error to {cid}: {e}")

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        state["last_processed_round_count"] = current_round_count
        save_state(today, state)

    else:
        print("[POLL] No new full lock to analyze.")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á ‡πÜ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text
    result = analyze_numbers(text, lock_size)
    if result:
        print(f"[MANUAL_REPLY] Chat {update.message.chat.id}")
        await update.message.reply_text(result, parse_mode="HTML")

# ======================================================================
# Main
# ======================================================================
def main():
    app = Application.builder().token(TOKEN).build()

    # Debug logger ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡∏î
    app.add_handler(MessageHandler(filters.ALL, update_logger), group=-1)

    # ‡∏Ñ‡∏¥‡∏ß‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ python-telegram-bot[job-queue] ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á)
    job_queue = app.job_queue
    if not job_queue:
        raise RuntimeError(
            "JobQueue not available. Install: pip install 'python-telegram-bot[job-queue]'"
        )
    job_queue.run_repeating(poll_and_analyze, interval=60, first=10)

    # Commands
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setlocks", setlocks))
    app.add_handler(CommandHandler("analyze", analyze_cmd))
    app.add_handler(CommandHandler("id", get_id))
    app.add_handler(CommandHandler("status", status_cmd))

    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    # block=False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏ö‡∏≠‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message, block=False))

    print("ü§ñ Bot is running...")
    if CHAT_IDS:
        print(f"üì¢ Broadcasting enabled for Chat IDs: {CHAT_IDS}")
    else:
        print("‚ö†Ô∏è Broadcasting is disabled. Set TELEGRAM_CHAT_IDS in .env to enable.")
    print("üïí Polling every 60 seconds (send only on full-lock).")

    app.run_polling()

if __name__ == "__main__":
    main()
